/* automatically generated by rust-bindgen 0.69.4 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type SwiftObject = ::std::os::raw::c_void;
extern "C" {
    pub static mut WCDBReleaseSwiftObject:
        ::std::option::Option<unsafe extern "C" fn(obj: *mut SwiftObject)>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPObject {
    pub realValue: *mut ::std::os::raw::c_void,
    pub deleter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub isRecyclableObj: bool,
}
#[test]
fn bindgen_test_layout_CPPObject() {
    const UNINIT: ::std::mem::MaybeUninit<CPPObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPObject>(),
        24usize,
        concat!("Size of: ", stringify!(CPPObject))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPObject>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPObject),
            "::",
            stringify!(realValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPObject),
            "::",
            stringify!(deleter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isRecyclableObj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPObject),
            "::",
            stringify!(isRecyclableObj)
        )
    );
}
extern "C" {
    pub fn WCDBReleaseCPPObject(obj: *mut CPPObject);
}
pub type WCDBContextDestructor =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionalBool {
    pub hasValue: bool,
    pub value: bool,
}
#[test]
fn bindgen_test_layout_OptionalBool() {
    const UNINIT: ::std::mem::MaybeUninit<OptionalBool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OptionalBool>(),
        2usize,
        concat!("Size of: ", stringify!(OptionalBool))
    );
    assert_eq!(
        ::std::mem::align_of::<OptionalBool>(),
        1usize,
        concat!("Alignment of ", stringify!(OptionalBool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionalBool),
            "::",
            stringify!(hasValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionalBool),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionalUInt64 {
    pub hasValue: bool,
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_OptionalUInt64() {
    const UNINIT: ::std::mem::MaybeUninit<OptionalUInt64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OptionalUInt64>(),
        16usize,
        concat!("Size of: ", stringify!(OptionalUInt64))
    );
    assert_eq!(
        ::std::mem::align_of::<OptionalUInt64>(),
        8usize,
        concat!("Alignment of ", stringify!(OptionalUInt64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionalUInt64),
            "::",
            stringify!(hasValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionalUInt64),
            "::",
            stringify!(value)
        )
    );
}
pub const WCDBBridgedType_WCDBBridgedType_Invalid: WCDBBridgedType = 0;
pub const WCDBBridgedType_WCDBBridgedType_Null: WCDBBridgedType = 1;
pub const WCDBBridgedType_WCDBBridgedType_Bool: WCDBBridgedType = 2;
pub const WCDBBridgedType_WCDBBridgedType_Int: WCDBBridgedType = 3;
pub const WCDBBridgedType_WCDBBridgedType_UInt: WCDBBridgedType = 4;
pub const WCDBBridgedType_WCDBBridgedType_Double: WCDBBridgedType = 5;
pub const WCDBBridgedType_WCDBBridgedType_String: WCDBBridgedType = 6;
pub const WCDBBridgedType_WCDBBridgedType_Column: WCDBBridgedType = 7;
pub const WCDBBridgedType_WCDBBridgedType_Schema: WCDBBridgedType = 8;
pub const WCDBBridgedType_WCDBBridgedType_ColumnDef: WCDBBridgedType = 9;
pub const WCDBBridgedType_WCDBBridgedType_ColumnConstraint: WCDBBridgedType = 10;
pub const WCDBBridgedType_WCDBBridgedType_Expression: WCDBBridgedType = 11;
pub const WCDBBridgedType_WCDBBridgedType_LiteralValue: WCDBBridgedType = 12;
pub const WCDBBridgedType_WCDBBridgedType_ForeignKeyClause: WCDBBridgedType = 13;
pub const WCDBBridgedType_WCDBBridgedType_BindParameter: WCDBBridgedType = 14;
pub const WCDBBridgedType_WCDBBridgedType_RaiseFunction: WCDBBridgedType = 15;
pub const WCDBBridgedType_WCDBBridgedType_WindowDef: WCDBBridgedType = 16;
pub const WCDBBridgedType_WCDBBridgedType_Filter: WCDBBridgedType = 17;
pub const WCDBBridgedType_WCDBBridgedType_IndexedColumn: WCDBBridgedType = 18;
pub const WCDBBridgedType_WCDBBridgedType_TableConstraint: WCDBBridgedType = 19;
pub const WCDBBridgedType_WCDBBridgedType_CommonTableExpression: WCDBBridgedType = 20;
pub const WCDBBridgedType_WCDBBridgedType_QualifiedTableName: WCDBBridgedType = 21;
pub const WCDBBridgedType_WCDBBridgedType_OrderingTerm: WCDBBridgedType = 22;
pub const WCDBBridgedType_WCDBBridgedType_UpsertClause: WCDBBridgedType = 23;
pub const WCDBBridgedType_WCDBBridgedType_Pragma: WCDBBridgedType = 24;
pub const WCDBBridgedType_WCDBBridgedType_JoinClause: WCDBBridgedType = 25;
pub const WCDBBridgedType_WCDBBridgedType_TableOrSubquery: WCDBBridgedType = 26;
pub const WCDBBridgedType_WCDBBridgedType_JoinConstraint: WCDBBridgedType = 27;
pub const WCDBBridgedType_WCDBBridgedType_SelectCore: WCDBBridgedType = 28;
pub const WCDBBridgedType_WCDBBridgedType_ResultColumn: WCDBBridgedType = 29;
pub const WCDBBridgedType_WCDBBridgedType_FrameSpec: WCDBBridgedType = 30;
pub const WCDBBridgedType_WCDBBridgedType_AlterTableSTMT: WCDBBridgedType = 31;
pub const WCDBBridgedType_WCDBBridgedType_AnalyzeSTMT: WCDBBridgedType = 32;
pub const WCDBBridgedType_WCDBBridgedType_AttachSTMT: WCDBBridgedType = 33;
pub const WCDBBridgedType_WCDBBridgedType_BeginSTMT: WCDBBridgedType = 34;
pub const WCDBBridgedType_WCDBBridgedType_CommitSTMT: WCDBBridgedType = 35;
pub const WCDBBridgedType_WCDBBridgedType_RollbackSTMT: WCDBBridgedType = 36;
pub const WCDBBridgedType_WCDBBridgedType_SavepointSTMT: WCDBBridgedType = 37;
pub const WCDBBridgedType_WCDBBridgedType_ReleaseSTMT: WCDBBridgedType = 38;
pub const WCDBBridgedType_WCDBBridgedType_CreateIndexSTMT: WCDBBridgedType = 39;
pub const WCDBBridgedType_WCDBBridgedType_CreateTableSTMT: WCDBBridgedType = 40;
pub const WCDBBridgedType_WCDBBridgedType_CreateTriggerSTMT: WCDBBridgedType = 41;
pub const WCDBBridgedType_WCDBBridgedType_SelectSTMT: WCDBBridgedType = 42;
pub const WCDBBridgedType_WCDBBridgedType_InsertSTMT: WCDBBridgedType = 43;
pub const WCDBBridgedType_WCDBBridgedType_DeleteSTMT: WCDBBridgedType = 44;
pub const WCDBBridgedType_WCDBBridgedType_UpdateSTMT: WCDBBridgedType = 45;
pub const WCDBBridgedType_WCDBBridgedType_CreateViewSTMT: WCDBBridgedType = 46;
pub const WCDBBridgedType_WCDBBridgedType_CreateVirtualTableSTMT: WCDBBridgedType = 47;
pub const WCDBBridgedType_WCDBBridgedType_DetachSTMT: WCDBBridgedType = 48;
pub const WCDBBridgedType_WCDBBridgedType_DropIndexSTMT: WCDBBridgedType = 49;
pub const WCDBBridgedType_WCDBBridgedType_DropTableSTMT: WCDBBridgedType = 50;
pub const WCDBBridgedType_WCDBBridgedType_DropTriggerSTMT: WCDBBridgedType = 51;
pub const WCDBBridgedType_WCDBBridgedType_DropViewSTMT: WCDBBridgedType = 52;
pub const WCDBBridgedType_WCDBBridgedType_PragmaSTMT: WCDBBridgedType = 53;
pub const WCDBBridgedType_WCDBBridgedType_ReindexSTMT: WCDBBridgedType = 54;
pub const WCDBBridgedType_WCDBBridgedType_VacuumSTMT: WCDBBridgedType = 55;
pub const WCDBBridgedType_WCDBBridgedType_ExplainSTMT: WCDBBridgedType = 56;
pub type WCDBBridgedType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPData {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_CPPData() {
    const UNINIT: ::std::mem::MaybeUninit<CPPData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPData>(),
        16usize,
        concat!("Size of: ", stringify!(CPPData))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPData>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPData),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPData),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CPPCommonValue {
    pub type_: WCDBBridgedType,
    pub __bindgen_anon_1: CPPCommonValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CPPCommonValue__bindgen_ty_1 {
    pub intValue: ::std::os::raw::c_longlong,
    pub doubleValue: f64,
}
#[test]
fn bindgen_test_layout_CPPCommonValue__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CPPCommonValue__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPCommonValue__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CPPCommonValue__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPCommonValue__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPCommonValue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonValue__bindgen_ty_1),
            "::",
            stringify!(intValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doubleValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonValue__bindgen_ty_1),
            "::",
            stringify!(doubleValue)
        )
    );
}
#[test]
fn bindgen_test_layout_CPPCommonValue() {
    const UNINIT: ::std::mem::MaybeUninit<CPPCommonValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPCommonValue>(),
        16usize,
        concat!("Size of: ", stringify!(CPPCommonValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPCommonValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPCommonValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonValue),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPCommonArray {
    pub type_: WCDBBridgedType,
    pub length: ::std::os::raw::c_int,
    pub buffer: *mut *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CPPCommonArray() {
    const UNINIT: ::std::mem::MaybeUninit<CPPCommonArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPCommonArray>(),
        16usize,
        concat!("Size of: ", stringify!(CPPCommonArray))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPCommonArray>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPCommonArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonArray),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonArray),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonArray),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPMultiTypeArray {
    pub totalLength: ::std::os::raw::c_int,
    pub types: *const WCDBBridgedType,
    pub intValues: *const ::std::os::raw::c_longlong,
    pub doubleValues: *const f64,
    pub stringValues: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CPPMultiTypeArray() {
    const UNINIT: ::std::mem::MaybeUninit<CPPMultiTypeArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPMultiTypeArray>(),
        40usize,
        concat!("Size of: ", stringify!(CPPMultiTypeArray))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPMultiTypeArray>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPMultiTypeArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPMultiTypeArray),
            "::",
            stringify!(totalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPMultiTypeArray),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intValues) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPMultiTypeArray),
            "::",
            stringify!(intValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doubleValues) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPMultiTypeArray),
            "::",
            stringify!(doubleValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringValues) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPMultiTypeArray),
            "::",
            stringify!(stringValues)
        )
    );
}
pub type StringViewMapEnumerator = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: CPPCommonValue,
    ),
>;
extern "C" {
    pub fn WCDBEnumerateStringViewMap(
        map: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        enumerator: StringViewMapEnumerator,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPError {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPError() {
    const UNINIT: ::std::mem::MaybeUninit<CPPError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPError>(),
        8usize,
        concat!("Size of: ", stringify!(CPPError))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPError>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPError),
            "::",
            stringify!(innerValue)
        )
    );
}
pub const WCDBErrorLevel_WCDBErrorLevel_Ignore: WCDBErrorLevel = 1;
pub const WCDBErrorLevel_WCDBErrorLevel_Debug: WCDBErrorLevel = 2;
pub const WCDBErrorLevel_WCDBErrorLevel_Notice: WCDBErrorLevel = 3;
pub const WCDBErrorLevel_WCDBErrorLevel_Warning: WCDBErrorLevel = 4;
pub const WCDBErrorLevel_WCDBErrorLevel_Error: WCDBErrorLevel = 5;
pub const WCDBErrorLevel_WCDBErrorLevel_Fatal: WCDBErrorLevel = 6;
pub type WCDBErrorLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBErrorGetLevel(obj: CPPError) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WCDBErrorGetCode(obj: CPPError) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WCDBErrorGetMsg(obj: CPPError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBErrorEnumerateAllInfo(
        error: CPPError,
        context: *mut ::std::os::raw::c_void,
        callback: StringViewMapEnumerator,
    );
}
extern "C" {
    pub fn WCDBErrorReport(
        level: WCDBErrorLevel,
        code: ::std::os::raw::c_long,
        content: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        tag: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WCDBWinqGetDescription(statement: *mut CPPObject) -> *const ::std::os::raw::c_char;
}
pub const WCDBSyntaxOrder_WCDBSyntaxOrder_Asc: WCDBSyntaxOrder = 1;
pub const WCDBSyntaxOrder_WCDBSyntaxOrder_Desc: WCDBSyntaxOrder = 2;
pub type WCDBSyntaxOrder = ::std::os::raw::c_uint;
pub const WCDBSyntaxConflictAction_WCDBSyntaxConflictAction_Replace: WCDBSyntaxConflictAction = 1;
pub const WCDBSyntaxConflictAction_WCDBSyntaxConflictAction_Rollback: WCDBSyntaxConflictAction = 2;
pub const WCDBSyntaxConflictAction_WCDBSyntaxConflictAction_Abort: WCDBSyntaxConflictAction = 3;
pub const WCDBSyntaxConflictAction_WCDBSyntaxConflictAction_Fail: WCDBSyntaxConflictAction = 4;
pub const WCDBSyntaxConflictAction_WCDBSyntaxConflictAction_Ignore: WCDBSyntaxConflictAction = 5;
pub type WCDBSyntaxConflictAction = ::std::os::raw::c_uint;
pub const WCDBSyntaxCompoundOperator_WCDBSyntaxCompoundOperator_Union: WCDBSyntaxCompoundOperator =
    1;
pub const WCDBSyntaxCompoundOperator_WCDBSyntaxCompoundOperator_UnionAll:
    WCDBSyntaxCompoundOperator = 2;
pub const WCDBSyntaxCompoundOperator_WCDBSyntaxCompoundOperator_Intersect:
    WCDBSyntaxCompoundOperator = 3;
pub const WCDBSyntaxCompoundOperator_WCDBSyntaxCompoundOperator_Except: WCDBSyntaxCompoundOperator =
    4;
pub type WCDBSyntaxCompoundOperator = ::std::os::raw::c_uint;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_With: WCDBSyntaxJoinOperator = 1;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_Join: WCDBSyntaxJoinOperator = 2;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_LeftOuterJoin: WCDBSyntaxJoinOperator = 3;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_LeftJoin: WCDBSyntaxJoinOperator = 4;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_InnerJoin: WCDBSyntaxJoinOperator = 5;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_CrossJoin: WCDBSyntaxJoinOperator = 6;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_NaturalJoin: WCDBSyntaxJoinOperator = 7;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_NaturalLeftOuterJoin:
    WCDBSyntaxJoinOperator = 8;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_NaturalLeftJoin: WCDBSyntaxJoinOperator = 9;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_NaturalInnerJoin: WCDBSyntaxJoinOperator =
    10;
pub const WCDBSyntaxJoinOperator_WCDBSyntaxJoinOperator_NaturalCrossJoin: WCDBSyntaxJoinOperator =
    11;
pub type WCDBSyntaxJoinOperator = ::std::os::raw::c_uint;
pub const WCDBSyntaxLimitParameterType_WCDBSyntaxLimitParameterType_NotSet:
    WCDBSyntaxLimitParameterType = 0;
pub const WCDBSyntaxLimitParameterType_WCDBSyntaxLimitParameterType_Offset:
    WCDBSyntaxLimitParameterType = 1;
pub const WCDBSyntaxLimitParameterType_WCDBSyntaxLimitParameterType_End:
    WCDBSyntaxLimitParameterType = 2;
pub type WCDBSyntaxLimitParameterType = ::std::os::raw::c_uint;
pub const WCDBSyntaxMatchType_WCDBSyntaxMatchType_Simple: WCDBSyntaxMatchType = 1;
pub const WCDBSyntaxMatchType_WCDBSyntaxMatchType_Full: WCDBSyntaxMatchType = 2;
pub const WCDBSyntaxMatchType_WCDBSyntaxMatchType_Partial: WCDBSyntaxMatchType = 3;
pub type WCDBSyntaxMatchType = ::std::os::raw::c_uint;
pub const WCDBSyntaxColumnType_WCDBSyntaxColumnType_Null: WCDBSyntaxColumnType = 0;
pub const WCDBSyntaxColumnType_WCDBSyntaxColumnType_Integer: WCDBSyntaxColumnType = 1;
pub const WCDBSyntaxColumnType_WCDBSyntaxColumnType_Float: WCDBSyntaxColumnType = 2;
pub const WCDBSyntaxColumnType_WCDBSyntaxColumnType_Text: WCDBSyntaxColumnType = 3;
pub const WCDBSyntaxColumnType_WCDBSyntaxColumnType_BLOB: WCDBSyntaxColumnType = 4;
pub type WCDBSyntaxColumnType = ::std::os::raw::c_uint;
pub const WCDBSyntaxTransactionType_WCDBSyntaxTransactionType_Deferred: WCDBSyntaxTransactionType =
    0;
pub const WCDBSyntaxTransactionType_WCDBSyntaxTransactionType_Immediate: WCDBSyntaxTransactionType =
    1;
pub const WCDBSyntaxTransactionType_WCDBSyntaxTransactionType_Exclusive: WCDBSyntaxTransactionType =
    2;
pub type WCDBSyntaxTransactionType = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBStatementNeedToWrite(statement: *mut CPPObject) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPBindParameter {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPBindParameter() {
    const UNINIT: ::std::mem::MaybeUninit<CPPBindParameter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPBindParameter>(),
        8usize,
        concat!("Size of: ", stringify!(CPPBindParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPBindParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPBindParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPBindParameter),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPColumn {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPColumn() {
    const UNINIT: ::std::mem::MaybeUninit<CPPColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPColumn>(),
        8usize,
        concat!("Size of: ", stringify!(CPPColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPColumn),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPColumnConstraint {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPColumnConstraint() {
    const UNINIT: ::std::mem::MaybeUninit<CPPColumnConstraint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPColumnConstraint>(),
        8usize,
        concat!("Size of: ", stringify!(CPPColumnConstraint))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPColumnConstraint>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPColumnConstraint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPColumnConstraint),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPColumnDef {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPColumnDef() {
    const UNINIT: ::std::mem::MaybeUninit<CPPColumnDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPColumnDef>(),
        8usize,
        concat!("Size of: ", stringify!(CPPColumnDef))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPColumnDef>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPColumnDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPColumnDef),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPCommonTableExpression {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPCommonTableExpression() {
    const UNINIT: ::std::mem::MaybeUninit<CPPCommonTableExpression> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPCommonTableExpression>(),
        8usize,
        concat!("Size of: ", stringify!(CPPCommonTableExpression))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPCommonTableExpression>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPCommonTableExpression))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCommonTableExpression),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPExpression {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPExpression() {
    const UNINIT: ::std::mem::MaybeUninit<CPPExpression> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPExpression>(),
        8usize,
        concat!("Size of: ", stringify!(CPPExpression))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPExpression>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPExpression))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPExpression),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPFilter {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPFilter() {
    const UNINIT: ::std::mem::MaybeUninit<CPPFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPFilter>(),
        8usize,
        concat!("Size of: ", stringify!(CPPFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPFilter),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPForeignKey {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPForeignKey() {
    const UNINIT: ::std::mem::MaybeUninit<CPPForeignKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPForeignKey>(),
        8usize,
        concat!("Size of: ", stringify!(CPPForeignKey))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPForeignKey>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPForeignKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPForeignKey),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPFrameSpec {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPFrameSpec() {
    const UNINIT: ::std::mem::MaybeUninit<CPPFrameSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPFrameSpec>(),
        8usize,
        concat!("Size of: ", stringify!(CPPFrameSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPFrameSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPFrameSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPFrameSpec),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPIndexedColumn {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPIndexedColumn() {
    const UNINIT: ::std::mem::MaybeUninit<CPPIndexedColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPIndexedColumn>(),
        8usize,
        concat!("Size of: ", stringify!(CPPIndexedColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPIndexedColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPIndexedColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPIndexedColumn),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPJoin {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPJoin() {
    const UNINIT: ::std::mem::MaybeUninit<CPPJoin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPJoin>(),
        8usize,
        concat!("Size of: ", stringify!(CPPJoin))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPJoin>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPJoin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPJoin),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPLiteralValue {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPLiteralValue() {
    const UNINIT: ::std::mem::MaybeUninit<CPPLiteralValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPLiteralValue>(),
        8usize,
        concat!("Size of: ", stringify!(CPPLiteralValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPLiteralValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPLiteralValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPLiteralValue),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPOrderingTerm {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPOrderingTerm() {
    const UNINIT: ::std::mem::MaybeUninit<CPPOrderingTerm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPOrderingTerm>(),
        8usize,
        concat!("Size of: ", stringify!(CPPOrderingTerm))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPOrderingTerm>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPOrderingTerm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPOrderingTerm),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPPragma {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPPragma() {
    const UNINIT: ::std::mem::MaybeUninit<CPPPragma> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPPragma>(),
        8usize,
        concat!("Size of: ", stringify!(CPPPragma))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPPragma>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPPragma))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPragma),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPQualifiedTable {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPQualifiedTable() {
    const UNINIT: ::std::mem::MaybeUninit<CPPQualifiedTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPQualifiedTable>(),
        8usize,
        concat!("Size of: ", stringify!(CPPQualifiedTable))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPQualifiedTable>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPQualifiedTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPQualifiedTable),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPRaiseFunction {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPRaiseFunction() {
    const UNINIT: ::std::mem::MaybeUninit<CPPRaiseFunction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPRaiseFunction>(),
        8usize,
        concat!("Size of: ", stringify!(CPPRaiseFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPRaiseFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPRaiseFunction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPRaiseFunction),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPResultColumn {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPResultColumn() {
    const UNINIT: ::std::mem::MaybeUninit<CPPResultColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPResultColumn>(),
        8usize,
        concat!("Size of: ", stringify!(CPPResultColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPResultColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPResultColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPResultColumn),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPSchema {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPSchema() {
    const UNINIT: ::std::mem::MaybeUninit<CPPSchema> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPSchema>(),
        8usize,
        concat!("Size of: ", stringify!(CPPSchema))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPSchema>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPSchema))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPSchema),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPTableConstraint {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPTableConstraint() {
    const UNINIT: ::std::mem::MaybeUninit<CPPTableConstraint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPTableConstraint>(),
        8usize,
        concat!("Size of: ", stringify!(CPPTableConstraint))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPTableConstraint>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPTableConstraint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPTableConstraint),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPTableOrSubquery {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPTableOrSubquery() {
    const UNINIT: ::std::mem::MaybeUninit<CPPTableOrSubquery> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPTableOrSubquery>(),
        8usize,
        concat!("Size of: ", stringify!(CPPTableOrSubquery))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPTableOrSubquery>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPTableOrSubquery))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPTableOrSubquery),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPUpsert {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPUpsert() {
    const UNINIT: ::std::mem::MaybeUninit<CPPUpsert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPUpsert>(),
        8usize,
        concat!("Size of: ", stringify!(CPPUpsert))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPUpsert>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPUpsert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPUpsert),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPWindowDef {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPWindowDef() {
    const UNINIT: ::std::mem::MaybeUninit<CPPWindowDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPWindowDef>(),
        8usize,
        concat!("Size of: ", stringify!(CPPWindowDef))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPWindowDef>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPWindowDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPWindowDef),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementAlterTable {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementAlterTable() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementAlterTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementAlterTable>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementAlterTable))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementAlterTable>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementAlterTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementAlterTable),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementAnalyze {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementAnalyze() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementAnalyze> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementAnalyze>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementAnalyze))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementAnalyze>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementAnalyze))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementAnalyze),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementAttach {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementAttach() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementAttach> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementAttach>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementAttach))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementAttach>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementAttach))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementAttach),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementBegin {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementBegin() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementBegin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementBegin>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementBegin))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementBegin>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementBegin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementBegin),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCommit {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCommit() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCommit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCommit>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCommit))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCommit>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCommit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCommit),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCreateIndex {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCreateIndex() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCreateIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCreateIndex>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCreateIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCreateIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCreateIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCreateIndex),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCreateTable {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCreateTable() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCreateTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCreateTable>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCreateTable))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCreateTable>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCreateTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCreateTable),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCreateTrigger {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCreateTrigger() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCreateTrigger> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCreateTrigger>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCreateTrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCreateTrigger>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCreateTrigger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCreateTrigger),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCreateView {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCreateView() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCreateView> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCreateView>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCreateView))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCreateView>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCreateView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCreateView),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementCreateVirtualTable {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementCreateVirtualTable() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementCreateVirtualTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementCreateVirtualTable>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementCreateVirtualTable))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementCreateVirtualTable>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementCreateVirtualTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementCreateVirtualTable),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDelete {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDelete() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDelete> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDelete>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDelete))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDelete>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDelete))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDelete),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDetach {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDetach() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDetach> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDetach>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDetach))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDetach>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDetach))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDetach),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDropIndex {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDropIndex() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDropIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDropIndex>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDropIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDropIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDropIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDropIndex),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDropTable {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDropTable() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDropTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDropTable>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDropTable))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDropTable>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDropTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDropTable),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDropTrigger {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDropTrigger() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDropTrigger> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDropTrigger>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDropTrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDropTrigger>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDropTrigger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDropTrigger),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementDropView {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementDropView() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementDropView> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementDropView>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementDropView))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementDropView>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementDropView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementDropView),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementExplain {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementExplain() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementExplain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementExplain>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementExplain))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementExplain>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementExplain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementExplain),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementInsert {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementInsert() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementInsert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementInsert>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementInsert))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementInsert>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementInsert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementInsert),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementPragma {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementPragma() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementPragma> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementPragma>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementPragma))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementPragma>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementPragma))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementPragma),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementReIndex {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementReIndex() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementReIndex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementReIndex>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementReIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementReIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementReIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementReIndex),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementRelease {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementRelease() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementRelease> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementRelease>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementRelease))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementRelease>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementRelease))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementRelease),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementRollback {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementRollback() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementRollback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementRollback>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementRollback))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementRollback>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementRollback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementRollback),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementSavepoint {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementSavepoint() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementSavepoint> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementSavepoint>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementSavepoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementSavepoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementSavepoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementSavepoint),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementSelect {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementSelect() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementSelect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementSelect>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementSelect))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementSelect>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementSelect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementSelect),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementUpdate {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementUpdate() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementUpdate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementUpdate>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementUpdate))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementUpdate>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementUpdate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementUpdate),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPStatementVacuum {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPStatementVacuum() {
    const UNINIT: ::std::mem::MaybeUninit<CPPStatementVacuum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPStatementVacuum>(),
        8usize,
        concat!("Size of: ", stringify!(CPPStatementVacuum))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPStatementVacuum>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPStatementVacuum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPStatementVacuum),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPHandleStatement {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPHandleStatement() {
    const UNINIT: ::std::mem::MaybeUninit<CPPHandleStatement> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPHandleStatement>(),
        8usize,
        concat!("Size of: ", stringify!(CPPHandleStatement))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPHandleStatement>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPHandleStatement))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPHandleStatement),
            "::",
            stringify!(innerValue)
        )
    );
}
pub const WCDBColumnValueType_WCDBColumnValueTypeInterger: WCDBColumnValueType = 1;
pub const WCDBColumnValueType_WCDBColumnValueTypeFloat: WCDBColumnValueType = 2;
pub const WCDBColumnValueType_WCDBColumnValueTypeString: WCDBColumnValueType = 3;
pub const WCDBColumnValueType_WCDBColumnValueTypeBLOB: WCDBColumnValueType = 4;
pub const WCDBColumnValueType_WCDBColumnValueTypeNull: WCDBColumnValueType = 5;
pub type WCDBColumnValueType = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBHandleStatementGetError(handleStatement: CPPHandleStatement) -> CPPError;
}
extern "C" {
    pub fn WCDBHandleStatementPrepare(
        handleStatement: CPPHandleStatement,
        statement: *mut CPPObject,
    ) -> bool;
}
extern "C" {
    pub fn WCDBHandleStatementPrepareSQL(
        handleStatement: CPPHandleStatement,
        sql: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn WCDBHandleStatementCheckPrepared(handleStatement: CPPHandleStatement) -> bool;
}
extern "C" {
    pub fn WCDBHandleStatementStep(handleStatement: CPPHandleStatement) -> bool;
}
extern "C" {
    pub fn WCDBHandleStatementReset(handleStatement: CPPHandleStatement);
}
extern "C" {
    pub fn WCDBHandleStatementClearBindings(handleStatement: CPPHandleStatement);
}
extern "C" {
    pub fn WCDBHandleStatementFinalize(handleStatement: CPPHandleStatement);
}
extern "C" {
    pub fn WCDBHandleStatementIsDone(handleStatement: CPPHandleStatement) -> bool;
}
extern "C" {
    pub fn WCDBHandleStatementBindInteger(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
        intValue: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindDouble(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
        doubleValue: f64,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindText(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindText16(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_short,
        textLength: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindBlob(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_uchar,
        buffLength: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindNull(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBHandleStatementBindParameterIndex(
        handleStatement: CPPHandleStatement,
        parameterName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WCDBHandleStatementGetColumnType(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> WCDBColumnValueType;
}
extern "C" {
    pub fn WCDBHandleStatementGetInteger(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn WCDBHandleStatementGetDouble(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn WCDBHandleStatementGetText(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBHandleStatementGetText16(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_short;
}
extern "C" {
    pub fn WCDBHandleStatementGetText16Length(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WCDBHandleStatementGetBlob(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn WCDBHandleStatementGetColumnSize(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn WCDBHandleStatementGetColumnCount(
        handleStatement: CPPHandleStatement,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WCDBHandleStatementGetColumnName(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBHandleStatementGetOriginalColumnName(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBHandleStatementGetColumnTableName(
        handleStatement: CPPHandleStatement,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBHandleStatementIsReadOnly(handleStatement: CPPHandleStatement) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPHandle {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPHandle() {
    const UNINIT: ::std::mem::MaybeUninit<CPPHandle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPHandle>(),
        8usize,
        concat!("Size of: ", stringify!(CPPHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPHandle>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPHandle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPHandle),
            "::",
            stringify!(innerValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPCancellationSignal {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPCancellationSignal() {
    const UNINIT: ::std::mem::MaybeUninit<CPPCancellationSignal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPCancellationSignal>(),
        8usize,
        concat!("Size of: ", stringify!(CPPCancellationSignal))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPCancellationSignal>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPCancellationSignal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPCancellationSignal),
            "::",
            stringify!(innerValue)
        )
    );
}
extern "C" {
    pub fn WCDBHandleGetError(handle: CPPHandle) -> CPPError;
}
extern "C" {
    pub fn WCDBHandleCheckValid(handle: CPPHandle) -> bool;
}
extern "C" {
    pub fn WCDBHandleGetMainStatement(handle: CPPHandle) -> CPPHandleStatement;
}
extern "C" {
    pub fn WCDBHandleGetOrCreatePreparedStatement(
        handle: CPPHandle,
        statement: *mut CPPObject,
    ) -> CPPHandleStatement;
}
extern "C" {
    pub fn WCDBHandleGetOrCreatePreparedSQL(
        handle: CPPHandle,
        sql: *const ::std::os::raw::c_char,
    ) -> CPPHandleStatement;
}
extern "C" {
    pub fn WCDBHandleFinalizeStatements(handle: CPPHandle);
}
extern "C" {
    pub fn WCDBHandleExecute(handle: CPPHandle, statement: *mut CPPObject) -> bool;
}
extern "C" {
    pub fn WCDBHandleExecuteSQL(handle: CPPHandle, sql: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn WCDBHandleExistTable(
        handle: CPPHandle,
        tableName: *const ::std::os::raw::c_char,
    ) -> OptionalBool;
}
extern "C" {
    pub fn WCDBHandleGetChange(handle: CPPHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WCDBHandleGetTotalChange(handle: CPPHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WCDBHandleGetLastInsertedRowID(handle: CPPHandle) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn WCDBHandleIsInTransaction(handle: CPPHandle) -> bool;
}
extern "C" {
    pub fn WCDBHandleBeginTransaction(handle: CPPHandle) -> bool;
}
extern "C" {
    pub fn WCDBHandleCommitTransaction(handle: CPPHandle) -> bool;
}
extern "C" {
    pub fn WCDBHandleRollbackTransaction(handle: CPPHandle);
}
pub type TransactionCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, handle: CPPHandle) -> bool,
>;
extern "C" {
    pub fn WCDBHandleRunTransaction(
        handle: CPPHandle,
        context: *mut ::std::os::raw::c_void,
        transaction: TransactionCallback,
    ) -> bool;
}
pub type PausableTransaction = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        arg1: CPPHandle,
        arg2: *mut bool,
        arg3: bool,
    ) -> bool,
>;
extern "C" {
    pub fn WCDBHandleRunPausableTransaction(
        handle: CPPHandle,
        context: *mut ::std::os::raw::c_void,
        pausableTransaction: PausableTransaction,
    ) -> bool;
}
extern "C" {
    pub fn WCDBCancellationSignalCreate() -> CPPCancellationSignal;
}
extern "C" {
    pub fn WCDBCancellationSignalCancel(signal: CPPCancellationSignal);
}
extern "C" {
    pub fn WCDBHandleAttachCancellationSignal(handle: CPPHandle, signal: CPPCancellationSignal);
}
extern "C" {
    pub fn WCDBHandleDettachCancellationSignal(handle: CPPHandle);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPBinding {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPBinding() {
    const UNINIT: ::std::mem::MaybeUninit<CPPBinding> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPBinding>(),
        8usize,
        concat!("Size of: ", stringify!(CPPBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPBinding),
            "::",
            stringify!(innerValue)
        )
    );
}
extern "C" {
    pub fn WCDBBindingCreate() -> CPPBinding;
}
extern "C" {
    pub fn WCDBBindingAddColumnDef(binding: CPPBinding, columnDef: CPPColumnDef);
}
extern "C" {
    pub fn WCDBBindingEnableAutoIncrementForExistingTable(binding: CPPBinding);
}
extern "C" {
    pub fn WCDBBindingAddColumnConstraint(
        binding: CPPBinding,
        columnName: *const ::std::os::raw::c_char,
        constraint: CPPColumnConstraint,
    );
}
extern "C" {
    pub fn WCDBBindingAddIndex(
        binding: CPPBinding,
        indexNameOrSuffix: *const ::std::os::raw::c_char,
        isFullName: bool,
        createIndex: CPPStatementCreateIndex,
    );
}
extern "C" {
    pub fn WCDBBindingAddTableConstraint(binding: CPPBinding, tableConstraint: CPPTableConstraint);
}
extern "C" {
    pub fn WCDBBindingConfigVirtualModule(
        binding: CPPBinding,
        moduleName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBBindingConfigVirtualModuleArgument(
        binding: CPPBinding,
        argument: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBBindingIsPrimaryKey(
        binding: CPPBinding,
        columnName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn WCDBBindingCreateTable(
        binding: CPPBinding,
        tableName: *const ::std::os::raw::c_char,
        handle: CPPHandle,
    ) -> bool;
}
extern "C" {
    pub fn WCDBBindingCreateVirtualTable(
        binding: CPPBinding,
        tableName: *const ::std::os::raw::c_char,
        handle: CPPHandle,
    ) -> bool;
}
extern "C" {
    pub fn WCDBBindingConfigWithoutRowId(binding: CPPBinding);
}
extern "C" {
    pub fn WCDBBindingGetBaseBinding(binding: CPPBinding) -> *const ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPDatabase {
    pub innerValue: *mut CPPObject,
}
#[test]
fn bindgen_test_layout_CPPDatabase() {
    const UNINIT: ::std::mem::MaybeUninit<CPPDatabase> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPDatabase>(),
        8usize,
        concat!("Size of: ", stringify!(CPPDatabase))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPDatabase>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPDatabase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPDatabase),
            "::",
            stringify!(innerValue)
        )
    );
}
extern "C" {
    pub fn WCDBDatabaseGetError(database: CPPDatabase) -> CPPError;
}
extern "C" {
    pub fn WCDBDatabaseGetTag(database: CPPDatabase) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WCDBDatabaseSetTag(database: CPPDatabase, tag: ::std::os::raw::c_long);
}
extern "C" {
    pub fn WCDBDatabaseGetPath(database: CPPDatabase) -> *const ::std::os::raw::c_char;
}
pub type WCDBStringEnumerater = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        string: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseGetPaths(
        database: CPPDatabase,
        context: *mut ::std::os::raw::c_void,
        enumerater: WCDBStringEnumerater,
    );
}
extern "C" {
    pub fn WCDBDatabaseGetHandle(database: CPPDatabase, writeHint: bool) -> CPPHandle;
}
extern "C" {
    pub fn WCDBDatabaseCanOpen(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseIsOpened(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseIsBlockaded(database: CPPDatabase) -> bool;
}
pub type WCDBDatabaseCloseCallback =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn WCDBDatabaseClose(
        database: CPPDatabase,
        context: *mut ::std::os::raw::c_void,
        callback: WCDBDatabaseCloseCallback,
    );
}
extern "C" {
    pub fn WCDBDatabaseBlockade(database: CPPDatabase);
}
extern "C" {
    pub fn WCDBDatabaseUnblockade(database: CPPDatabase);
}
extern "C" {
    pub fn WCDBDatabasePurge(database: CPPDatabase);
}
extern "C" {
    pub fn WCDBDatabaseConfigCipher(
        database: CPPDatabase,
        cipherKey: *const ::std::os::raw::c_uchar,
        keyLength: ::std::os::raw::c_int,
        pageSize: ::std::os::raw::c_int,
        cipherVersion: ::std::os::raw::c_int,
    );
}
pub type WCDBConfigCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, handle: CPPHandle) -> bool,
>;
extern "C" {
    pub fn WCDBDatabaseConfig(
        database: CPPDatabase,
        name: *const ::std::os::raw::c_char,
        invocation: WCDBConfigCallback,
        invocationContext: *mut ::std::os::raw::c_void,
        unInvocation: WCDBConfigCallback,
        unInvocationContext: *mut ::std::os::raw::c_void,
        priority: ::std::os::raw::c_int,
        destructor: WCDBContextDestructor,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPPPerformanceInfo {
    pub tablePageReadCount: ::std::os::raw::c_int,
    pub tablePageWriteCount: ::std::os::raw::c_int,
    pub indexPageReadCount: ::std::os::raw::c_int,
    pub indexPageWriteCount: ::std::os::raw::c_int,
    pub overflowPageReadCount: ::std::os::raw::c_int,
    pub overflowPageWriteCount: ::std::os::raw::c_int,
    pub costInNanoseconds: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_CPPPerformanceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CPPPerformanceInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CPPPerformanceInfo>(),
        32usize,
        concat!("Size of: ", stringify!(CPPPerformanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CPPPerformanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CPPPerformanceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablePageReadCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(tablePageReadCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablePageWriteCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(tablePageWriteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexPageReadCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(indexPageReadCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexPageWriteCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(indexPageWriteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflowPageReadCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(overflowPageReadCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflowPageWriteCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(overflowPageWriteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costInNanoseconds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPPPerformanceInfo),
            "::",
            stringify!(costInNanoseconds)
        )
    );
}
pub type WCDBPerformanceTracer = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_long,
        path: *const ::std::os::raw::c_char,
        handleId: ::std::os::raw::c_ulonglong,
        sql: *const ::std::os::raw::c_char,
        info: *const CPPPerformanceInfo,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseGlobalTracePerformance(
        tracer: WCDBPerformanceTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseTracePerformance(
        database: CPPDatabase,
        tracer: WCDBPerformanceTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
pub type WCDBSQLTracer = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_long,
        path: *const ::std::os::raw::c_char,
        handleId: ::std::os::raw::c_ulonglong,
        sql: *const ::std::os::raw::c_char,
        info: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseGlobalTraceSQL(
        tracer: WCDBSQLTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseTraceSQL(
        database: CPPDatabase,
        tracer: WCDBSQLTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseSetFullSQLTraceEnable(database: CPPDatabase, enable: bool);
}
pub type WCDBErrorTracer = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, error: CPPError),
>;
extern "C" {
    pub fn WCDBDatabaseGlobalTraceError(
        tracer: WCDBErrorTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseTraceError(
        database: CPPDatabase,
        tracer: WCDBErrorTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyHandleCount: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyHandleOpenTime: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyHandleOpenCPUTime:
        *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeySchemaUsage: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyTableCount: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyIndexCount: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBDatabaseOperationTracerInfoKeyTriggerCount: *const ::std::os::raw::c_char;
}
pub type WCDBOperationTracer = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        database: CPPDatabase,
        operation: ::std::os::raw::c_long,
        info: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseGlobalTraceOperation(
        tracer: WCDBOperationTracer,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseRemoveFile(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseMoveFile(
        database: CPPDatabase,
        destination: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseGetFileSize(database: CPPDatabase) -> OptionalUInt64;
}
pub type WCDBCorruptioNotification = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, database: CPPDatabase),
>;
extern "C" {
    pub fn WCDBDatabaseSetNotificationWhenCorrupted(
        database: CPPDatabase,
        notification: WCDBCorruptioNotification,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseCheckIfCorrupted(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseCheckIsAlreadyCorrupted(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseEnableAutoBackup(database: CPPDatabase, enable: bool);
}
extern "C" {
    pub fn WCDBDatabaseBackup(database: CPPDatabase) -> bool;
}
pub type WCDBBackupFilter = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tableName: *const ::std::os::raw::c_char,
    ) -> bool,
>;
extern "C" {
    pub fn WCDBDatabaseFilterBackup(
        database: CPPDatabase,
        filter: WCDBBackupFilter,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseDeposit(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseRemoveDepositedFiles(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseContainDepositedFiles(database: CPPDatabase) -> bool;
}
pub type WCDBProgressUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        percentage: f64,
        increment: f64,
    ) -> bool,
>;
extern "C" {
    pub fn WCDBDatabaseRetrieve(
        database: CPPDatabase,
        monitor: WCDBProgressUpdate,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    ) -> f64;
}
extern "C" {
    pub fn WCDBDatabaseVacuum(
        database: CPPDatabase,
        monitor: WCDBProgressUpdate,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    ) -> bool;
}
extern "C" {
    pub fn WCDBDatabasePassiveCheckpoint(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseTruncateCheckpoint(database: CPPDatabase) -> bool;
}
pub type WCDBMigrationInfoSetter = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        sourceTable: *const ::std::os::raw::c_char,
        filterCondition: CPPExpression,
    ),
>;
pub type WCDBMigrationFilter = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        table: *const ::std::os::raw::c_char,
        info: *mut ::std::os::raw::c_void,
        setter: WCDBMigrationInfoSetter,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseAddMigration(
        database: CPPDatabase,
        sourcePath: *const ::std::os::raw::c_char,
        sourceCipher: *const ::std::os::raw::c_uchar,
        cipherLength: ::std::os::raw::c_int,
        filter: WCDBMigrationFilter,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseStepMigration(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseEnableAutoMigration(database: CPPDatabase, flag: bool);
}
pub type WCDBMigrationNotification = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        database: CPPDatabase,
        table: *const ::std::os::raw::c_char,
        sourceTable: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseSetNotificationWhenMigrated(
        database: CPPDatabase,
        notification: WCDBMigrationNotification,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseIsMigrated(database: CPPDatabase) -> bool;
}
pub type WCDBDataEnumerator =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void) -> CPPData>;
extern "C" {
    pub fn WCDBDatabaseTrainDict(
        dictId: ::std::os::raw::c_uchar,
        dataEnumerator: WCDBDataEnumerator,
        enumerateContext: *mut ::std::os::raw::c_void,
    ) -> CPPData;
}
extern "C" {
    pub fn WCDBDatabaseRegisterDict(
        dict: *const ::std::os::raw::c_uchar,
        dictSize: ::std::os::raw::c_long,
        dictId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseSetZSTDNormalCompress(
        context: *mut ::std::os::raw::c_void,
        column: CPPColumn,
    );
}
extern "C" {
    pub fn WCDBDatabaseSetZSTDDictCompress(
        context: *mut ::std::os::raw::c_void,
        column: CPPColumn,
        dictid: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn WCDBDatabaseSetZSTDMultiDictCompress(
        context: *mut ::std::os::raw::c_void,
        column: CPPColumn,
        matchColumn: CPPColumn,
        values: *const ::std::os::raw::c_longlong,
        dictIds: *const ::std::os::raw::c_uchar,
        dictCount: ::std::os::raw::c_int,
    );
}
pub type WCDBCompressionFilter = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        table: *const ::std::os::raw::c_char,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseSetCompression(
        database: CPPDatabase,
        filter: WCDBCompressionFilter,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseDisableCompressNewData(database: CPPDatabase, disable: bool);
}
extern "C" {
    pub fn WCDBDatabaseStepCompression(database: CPPDatabase) -> bool;
}
extern "C" {
    pub fn WCDBDatabaseEnableAutoCompression(database: CPPDatabase, enable: bool);
}
extern "C" {
    pub fn WCDBDatabaseIsCompressed(database: CPPDatabase) -> bool;
}
pub type WCDBCompressdNotification = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        arg1: CPPDatabase,
        table: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn WCDBDatabaseSetNotificationWhenCompressed(
        database: CPPDatabase,
        notification: WCDBCompressdNotification,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub fn WCDBDatabaseGetAliveHandleCount(database: CPPDatabase) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn WCDBCoreCreateDatabase(path: *const ::std::os::raw::c_char) -> CPPDatabase;
}
extern "C" {
    pub fn WCDBCoreSetDefaultCipherConfig(version: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WCDBCorePurgeAllDatabase();
}
extern "C" {
    pub fn WCDBCoreSetDefaultTemporaryDirectory(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn WCDBCoreSetAutoCheckpointEnable(database: CPPDatabase, enable: bool);
}
extern "C" {
    pub fn WCDBCoreSetAutoCheckpointMinFrames(frames: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WCDBCoreReleaseSQLiteMemory(bytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WCDBCoreSetSoftHeapLimit(limit: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn WCDBCoreGetThreadedError() -> CPPError;
}
pub type WCDBBusyTracer = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_long,
        path: *const ::std::os::raw::c_char,
        tid: ::std::os::raw::c_ulonglong,
        sql: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn WCDBCoreGlobalTraceBusy(
        tracer: WCDBBusyTracer,
        timeOut: f64,
        context: *mut ::std::os::raw::c_void,
        destructor: WCDBContextDestructor,
    );
}
extern "C" {
    pub static mut WCDBSwiftTokenizerCreate: ::std::option::Option<
        unsafe extern "C" fn(
            typeId: ::std::os::raw::c_int,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ) -> *mut SwiftObject,
    >;
}
extern "C" {
    pub static mut WCDBSwiftTokenizerLoadInput: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut SwiftObject,
            input: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut WCDBSwiftTokenizerNextToken: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut SwiftObject,
            ppToken: *mut *const ::std::os::raw::c_char,
            nToken: *mut ::std::os::raw::c_int,
            iStart: *mut ::std::os::raw::c_int,
            iEnd: *mut ::std::os::raw::c_int,
            tflags: *mut ::std::os::raw::c_int,
            iPosition: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static WCDBTokenizerErrorCodeOK: ::std::os::raw::c_int;
}
extern "C" {
    pub static WCDBTokenizerErrorCodeDone: ::std::os::raw::c_int;
}
extern "C" {
    pub static WCDBTokenizerErrorCodeNoMemory: ::std::os::raw::c_int;
}
extern "C" {
    pub static WCDBMaxSwiftTokenizerTypeId: ::std::os::raw::c_int;
}
pub const WCDBFTSVersion_WCDBFTSVersion3: WCDBFTSVersion = 3;
pub const WCDBFTSVersion_WCDBFTSVersion4: WCDBFTSVersion = 4;
pub const WCDBFTSVersion_WCDBFTSVersion5: WCDBFTSVersion = 5;
pub type WCDBFTSVersion = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBCoreRegisterFTSTokenizer(
        name: *const ::std::os::raw::c_char,
        typeId: ::std::os::raw::c_int,
        ftsVersion: WCDBFTSVersion,
    );
}
extern "C" {
    pub fn WCDBDatabaseEnableAutoMergeFTS5Index(database: CPPDatabase, enable: bool);
}
extern "C" {
    pub static mut WCDBTokenizerSimple: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerPorter: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerICU: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerUnicode61: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerOneOrBinary: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerLegacyOneOrBinary: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerVerbatim: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerPinyin: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerParameter_NeedSymbol: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerParameter_SimplifyChinese: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut WCDBTokenizerParameter_SkipStemming: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBDatabaseAddTokenizer(
        database: CPPDatabase,
        tokenizer: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub static mut WCDBAuxiliaryFunction_SubstringMatchInfo: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WCDBDatabaseAddAuxiliaryFunction(
        database: CPPDatabase,
        auxFunction: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBBindparameterCreateQuestionSignType(num: ::std::os::raw::c_int) -> CPPBindParameter;
}
extern "C" {
    pub fn WCDBBindparameterCreateAtSignType(
        name: *const ::std::os::raw::c_char,
    ) -> CPPBindParameter;
}
extern "C" {
    pub fn WCDBBindparameterCreateColonSignType(
        name: *const ::std::os::raw::c_char,
    ) -> CPPBindParameter;
}
extern "C" {
    pub fn WCDBBindparameterCreateDollarSignType(
        name: *const ::std::os::raw::c_char,
    ) -> CPPBindParameter;
}
extern "C" {
    pub fn WCDBColumnCreateAll() -> CPPColumn;
}
extern "C" {
    pub fn WCDBColumnCreateRowId() -> CPPColumn;
}
extern "C" {
    pub fn WCDBColumnCreateWithName(
        name: *const ::std::os::raw::c_char,
        binding: *const ::std::os::raw::c_void,
    ) -> CPPColumn;
}
extern "C" {
    pub fn WCDBColumnCreateWithName2(
        name: *const ::std::os::raw::c_char,
        binding: *const ::std::os::raw::c_void,
    ) -> CPPColumn;
}
extern "C" {
    pub fn WCDBColumnCopy(column: CPPColumn) -> CPPColumn;
}
extern "C" {
    pub fn WCDBColumnInTable(column: CPPColumn, table: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WCDBColumnOfSchema(column: CPPColumn, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBColumnOfSchema2(column: CPPColumn, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBColumnConfigAlias(
        column: CPPColumn,
        alias: *const ::std::os::raw::c_char,
    ) -> CPPResultColumn;
}
extern "C" {
    pub fn WCDBColumnAsExpressionOperand(column: CPPColumn) -> CPPExpression;
}
extern "C" {
    pub fn WCDBColumnConstraintCreate(name: *const ::std::os::raw::c_char) -> CPPColumnConstraint;
}
extern "C" {
    pub fn WCDBColumnConstraintConfigPrimaryKey(constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBColumnConstraintConfigOrder(constraint: CPPColumnConstraint, order: WCDBSyntaxOrder);
}
extern "C" {
    pub fn WCDBColumnConstraintConfigCoflictAction(
        constraint: CPPColumnConstraint,
        conflictAction: WCDBSyntaxConflictAction,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigAutoIncrement(constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBColumnConstraintConfigNotNull(constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBColumnConstraintConfigUnique(constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBColumnConstraintConfigCheck(
        constraint: CPPColumnConstraint,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigDefaultValue(
        constraint: CPPColumnConstraint,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigDefaultValue2(
        constraint: CPPColumnConstraint,
        expression: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigCollation(
        constraint: CPPColumnConstraint,
        collation: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigForeignKey(
        constraint: CPPColumnConstraint,
        foreignKey: CPPForeignKey,
    );
}
extern "C" {
    pub fn WCDBColumnConstraintConfigUnIndexed(constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBColumnDefCreateWithoutType2(commonValue: CPPCommonValue) -> CPPColumnDef;
}
extern "C" {
    pub fn WCDBColumnDefCreateWithType2(
        column: CPPCommonValue,
        type_: WCDBSyntaxColumnType,
    ) -> CPPColumnDef;
}
extern "C" {
    pub fn WCDBColumnDefCreateWithoutType(column: CPPColumn) -> CPPColumnDef;
}
extern "C" {
    pub fn WCDBColumnDefCreateWithType(
        column: CPPColumn,
        type_: WCDBSyntaxColumnType,
    ) -> CPPColumnDef;
}
extern "C" {
    pub fn WCDBColumnDefConfigConstraint(columnDef: CPPColumnDef, constraint: CPPColumnConstraint);
}
extern "C" {
    pub fn WCDBCommonTableExpressionCreate(
        tableName: *const ::std::os::raw::c_char,
    ) -> CPPCommonTableExpression;
}
extern "C" {
    pub fn WCDBCommonTableExpressionAddColumn(
        expression: CPPCommonTableExpression,
        column: CPPColumn,
    );
}
extern "C" {
    pub fn WCDBCommonTableExpressionAsSelection(
        expression: CPPCommonTableExpression,
        select: CPPStatementSelect,
    );
}
extern "C" {
    pub fn WCDBExpressionCreateWithBool(value: bool) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithLong(value: ::std::os::raw::c_longlong) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithDouble(value: f64) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithString(value: *const ::std::os::raw::c_char) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithLiteralValue(value: CPPLiteralValue) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithBindParameter(value: CPPBindParameter) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithColumn(column: CPPColumn) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithSelection(select: CPPStatementSelect) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithRaiseFunction(function: CPPRaiseFunction) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithFunction(
        funcName: *const ::std::os::raw::c_char,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithExistStatement(select: CPPStatementSelect) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreateWithNotExistStatement(select: CPPStatementSelect) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCreate(value: CPPCommonValue) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionSetWithSchema(expression: CPPExpression, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBExpressionSetWithSchema2(expression: CPPExpression, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBExpressionSetArgument(expression: CPPExpression, argument: CPPCommonValue);
}
extern "C" {
    pub fn WCDBExpressionSetArguments(
        expression: CPPExpression,
        arguments: *const CPPExpression,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBExpressionInvoke(expression: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionInvokeAll(expression: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionDistinct(expression: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionCast(expression: CPPExpression) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCast2(expression: CPPCommonValue) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionAs(expression: CPPExpression, type_: WCDBSyntaxColumnType);
}
extern "C" {
    pub fn WCDBExpressionConfigAlias(
        expression: CPPExpression,
        alias: *const ::std::os::raw::c_char,
    ) -> CPPResultColumn;
}
extern "C" {
    pub fn WCDBExpressionCaseWithExp(expression: CPPExpression) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCaseWithExp2(expression: CPPCommonValue) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCase() -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionSetWithWhenExp(expression: CPPExpression, when: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionSetWithWhenExp2(expression: CPPExpression, when: CPPCommonValue);
}
extern "C" {
    pub fn WCDBExpressionSetWithThenExp(expression: CPPExpression, then: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionSetWithThenExp2(expression: CPPExpression, then: CPPCommonValue);
}
extern "C" {
    pub fn WCDBExpressionSetWithElseExp(expression: CPPExpression, else_: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionSetWithElseExp2(expression: CPPExpression, else_: CPPCommonValue);
}
extern "C" {
    pub fn WCDBExpressionEscapeWith(expression: CPPExpression, operand: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionEscapeWith2(
        expression: CPPExpression,
        operand: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBExpressionCreateWithWindowFunction(
        funcName: *const ::std::os::raw::c_char,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionFilter(expression: CPPExpression, condition: CPPExpression);
}
extern "C" {
    pub fn WCDBExpressionOverWindowDef(expression: CPPExpression, def: CPPWindowDef);
}
extern "C" {
    pub fn WCDBExpressionOverWindow(
        expression: CPPExpression,
        window: *const ::std::os::raw::c_char,
    );
}
pub const WCDBExpressionUnaryOperateType_WCDBExpressionUnaryOperateType_Negative:
    WCDBExpressionUnaryOperateType = 1;
pub const WCDBExpressionUnaryOperateType_WCDBExpressionUnaryOperateType_Positive:
    WCDBExpressionUnaryOperateType = 2;
pub const WCDBExpressionUnaryOperateType_WCDBExpressionUnaryOperateType_Tilde:
    WCDBExpressionUnaryOperateType = 3;
pub const WCDBExpressionUnaryOperateType_WCDBExpressionUnaryOperateType_Not:
    WCDBExpressionUnaryOperateType = 4;
pub type WCDBExpressionUnaryOperateType = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBExpressionUnaryOperate(
        expression: CPPExpression,
        operatorType: WCDBExpressionUnaryOperateType,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionNullOperate(expression: CPPExpression, isNot: bool) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionNullOperate2(expression: CPPCommonValue, isNot: bool) -> CPPExpression;
}
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Concatenate:
    WCDBExpressionBinaryOperatorType = 1;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Multiply:
    WCDBExpressionBinaryOperatorType = 2;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Divide:
    WCDBExpressionBinaryOperatorType = 3;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Modulo:
    WCDBExpressionBinaryOperatorType = 4;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Plus:
    WCDBExpressionBinaryOperatorType = 5;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Minus:
    WCDBExpressionBinaryOperatorType = 6;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_LeftShift:
    WCDBExpressionBinaryOperatorType = 7;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_RightShift:
    WCDBExpressionBinaryOperatorType = 8;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_BitwiseAnd:
    WCDBExpressionBinaryOperatorType = 9;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_BitwiseOr:
    WCDBExpressionBinaryOperatorType = 10;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Less:
    WCDBExpressionBinaryOperatorType = 11;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_LessOrEqual:
    WCDBExpressionBinaryOperatorType = 12;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Greater:
    WCDBExpressionBinaryOperatorType = 13;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_GreaterOrEqual:
    WCDBExpressionBinaryOperatorType = 14;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Equal:
    WCDBExpressionBinaryOperatorType = 15;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_NotEqual:
    WCDBExpressionBinaryOperatorType = 16;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Is:
    WCDBExpressionBinaryOperatorType = 17;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_And:
    WCDBExpressionBinaryOperatorType = 18;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Or:
    WCDBExpressionBinaryOperatorType = 19;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Like:
    WCDBExpressionBinaryOperatorType = 20;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_GLOB:
    WCDBExpressionBinaryOperatorType = 21;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_RegExp:
    WCDBExpressionBinaryOperatorType = 22;
pub const WCDBExpressionBinaryOperatorType_WCDBExpressionBinaryOperatorType_Match:
    WCDBExpressionBinaryOperatorType = 23;
pub type WCDBExpressionBinaryOperatorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBExpressionBinaryOperate(
        left: CPPExpression,
        right: CPPExpression,
        operatorType: WCDBExpressionBinaryOperatorType,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionBinaryOperate2(
        left: CPPCommonValue,
        right: CPPCommonValue,
        operatorType: WCDBExpressionBinaryOperatorType,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionBetweenOperate(
        operand: CPPExpression,
        left: CPPExpression,
        right: CPPExpression,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionBetweenOperate2(
        operand: CPPCommonValue,
        left: CPPCommonValue,
        right: CPPCommonValue,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInOperate(
        operand: CPPCommonValue,
        valueArray: CPPCommonArray,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInTableOperate(
        operand: CPPExpression,
        table: *const ::std::os::raw::c_char,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInTableOperate2(
        operand: CPPCommonValue,
        table: *const ::std::os::raw::c_char,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInSelectionOperate(
        operand: CPPExpression,
        select: CPPStatementSelect,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInSelectionOperate2(
        operand: CPPCommonValue,
        select: CPPStatementSelect,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInExpressionOperate(
        operand: CPPExpression,
        expressions: *const CPPExpression,
        num: ::std::os::raw::c_int,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInFunctionOperate(
        operand: CPPExpression,
        func: *const ::std::os::raw::c_char,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionInFunctionOperate2(
        operand: CPPCommonValue,
        func: *const ::std::os::raw::c_char,
        isNot: bool,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCollateOperate(
        operand: CPPExpression,
        collation: *const ::std::os::raw::c_char,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBExpressionCollateOperate2(
        operand: CPPCommonValue,
        collation: *const ::std::os::raw::c_char,
    ) -> CPPExpression;
}
extern "C" {
    pub fn WCDBForeignKeyCreate() -> CPPForeignKey;
}
extern "C" {
    pub fn WCDBForeignKeyConfigReferencesTable(
        foreignKey: CPPForeignKey,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBForeignKeyAddColumn(foreignKey: CPPForeignKey, column: CPPColumn);
}
extern "C" {
    pub fn WCDBForeignKeyAddColumn2(foreignKey: CPPForeignKey, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnDeleteSetNull(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnDeleteSetDefault(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnDeleteCascade(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnDeleteRestrict(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnDeleteNoAction(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnUpdateSetNull(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnUpdateSetDefault(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnUpdateCascade(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnUpdateRestrict(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigOnUpdateNoAction(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigMatch(foreignKey: CPPForeignKey, match_: WCDBSyntaxMatchType);
}
extern "C" {
    pub fn WCDBForeignKeyConfigDeferrable(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigDeferrableInitiallyDeferred(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigDeferrableInitiallyImmediate(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigNotDeferrable(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigNotDeferrableInitiallyDeferred(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBForeignKeyConfigNotDeferrableInitiallyImmediate(foreignKey: CPPForeignKey);
}
extern "C" {
    pub fn WCDBFrameSpecCreate() -> CPPFrameSpec;
}
extern "C" {
    pub fn WCDBFrameSpecConfigRange(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigRows(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigUnboundedPreceding(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigPreceding(frameSpec: CPPFrameSpec, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBFrameSpecConfigPreceding2(frameSpec: CPPFrameSpec, expression: CPPCommonValue);
}
extern "C" {
    pub fn WCDBFrameSpecConfigCurrentRow(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenUnboundedPreceding(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenPreceding(frameSpec: CPPFrameSpec, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenPreceding2(
        frameSpec: CPPFrameSpec,
        expression: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenCurrentRow(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenFollowing(frameSpec: CPPFrameSpec, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBFrameSpecConfigBetweenFollowing2(
        frameSpec: CPPFrameSpec,
        expression: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndPreceding(frameSpec: CPPFrameSpec, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndPreceding2(frameSpec: CPPFrameSpec, expression: CPPCommonValue);
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndCurrentRow(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndFollowing(frameSpec: CPPFrameSpec, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndFollowing2(frameSpec: CPPFrameSpec, expression: CPPCommonValue);
}
extern "C" {
    pub fn WCDBFrameSpecConfigAndUnboundedFollowing(frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBIndexedColumnCreate(value: CPPCommonValue) -> CPPIndexedColumn;
}
extern "C" {
    pub fn WCDBIndexedColumnCreateWithColumn(column: CPPColumn) -> CPPIndexedColumn;
}
extern "C" {
    pub fn WCDBIndexedColumnCreateWithExpression(expression: CPPExpression) -> CPPIndexedColumn;
}
extern "C" {
    pub fn WCDBIndexedColumnConfigCollation(
        indexedColumn: CPPIndexedColumn,
        collation: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBIndexedColumnConfigOrder(indexedColumn: CPPIndexedColumn, order: WCDBSyntaxOrder);
}
extern "C" {
    pub fn WCDBJoinCreateWithTableOrSubquery(query: CPPTableOrSubquery) -> CPPJoin;
}
extern "C" {
    pub fn WCDBJoinCreateWithTableOrSubquery2(query: CPPCommonValue) -> CPPJoin;
}
extern "C" {
    pub fn WCDBJoinWith(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWith2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithLeftOuterJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithLeftOuterJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithLeftJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithLeftJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithInnerJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithInnerJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithCrossJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithCrossJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithNaturalJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithNaturalJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithNaturalLeftOuterJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithNaturalLeftOuterJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithNaturalLeftJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithNaturalLeftJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithNaturalInnerJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithNaturalInnerJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinWithNaturalCrossJoin(join: CPPJoin, query: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBJoinWithNaturalCrossJoin2(join: CPPJoin, query: CPPCommonValue);
}
extern "C" {
    pub fn WCDBJoinConfigOn(join: CPPJoin, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBJoinConfigUsingColumn(
        join: CPPJoin,
        columns: *const CPPColumn,
        columnNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBJoinConfigUsingColumn2(join: CPPJoin, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBLiteralValueCreate(value: CPPCommonValue) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithInt64(value: ::std::os::raw::c_longlong) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithUInt64(value: ::std::os::raw::c_ulonglong) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithDouble(value: f64) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithNull() -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithBool(value: bool) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithString(
        value: *const ::std::os::raw::c_char,
    ) -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithCurrentTime() -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithCurrentDate() -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBLiteralValueCreateWithCurrentTimestamp() -> CPPLiteralValue;
}
extern "C" {
    pub fn WCDBOrderingTermCreate(expression: CPPExpression) -> CPPOrderingTerm;
}
extern "C" {
    pub fn WCDBOrderingTermCreate2(expression: CPPCommonValue) -> CPPOrderingTerm;
}
extern "C" {
    pub fn WCDBOrderingTermConfigCollation(
        orderingTerm: CPPOrderingTerm,
        collation: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBOrderingTermConfigOrder(orderingTerm: CPPOrderingTerm, order: WCDBSyntaxOrder);
}
extern "C" {
    pub fn WCDBPragmaCreateWithName(name: *const ::std::os::raw::c_char) -> CPPPragma;
}
extern "C" {
    pub fn WCDBQualifiedTableCreateWithTable(
        name: *const ::std::os::raw::c_char,
    ) -> CPPQualifiedTable;
}
extern "C" {
    pub fn WCDBQualifiedTableConfigSchema2(table: CPPQualifiedTable, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBQualifiedTableConfigSchema(table: CPPQualifiedTable, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBQualifiedTableConfigAliasName(
        table: CPPQualifiedTable,
        alias: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBQualifiedTableConfigIndexName(
        table: CPPQualifiedTable,
        indexName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBQualifiedTableConfigNoIndexed(table: CPPQualifiedTable);
}
pub const WCDBSyntaxRaiseAction_WCDBSyntaxRaiseAction_Ignore: WCDBSyntaxRaiseAction = 0;
pub const WCDBSyntaxRaiseAction_WCDBSyntaxRaiseAction_Rollback: WCDBSyntaxRaiseAction = 1;
pub const WCDBSyntaxRaiseAction_WCDBSyntaxRaiseAction_Abort: WCDBSyntaxRaiseAction = 2;
pub const WCDBSyntaxRaiseAction_WCDBSyntaxRaiseAction_Fail: WCDBSyntaxRaiseAction = 3;
pub type WCDBSyntaxRaiseAction = ::std::os::raw::c_uint;
extern "C" {
    pub fn WCDBRaiseFunctionCreate() -> CPPRaiseFunction;
}
extern "C" {
    pub fn WCDBRaiseFunctionSetAction(
        function: CPPRaiseFunction,
        action: WCDBSyntaxRaiseAction,
        errMsg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBResultColumnCreate(expression: CPPCommonValue) -> CPPResultColumn;
}
extern "C" {
    pub fn WCDBResultColumnCreateWithExpression(expression: CPPExpression) -> CPPResultColumn;
}
extern "C" {
    pub fn WCDBResultColumnConfigAlias(
        column: CPPResultColumn,
        alias: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBSchemaCreateWithName(name: *const ::std::os::raw::c_char) -> CPPSchema;
}
extern "C" {
    pub fn WCDBSchemaMain() -> CPPSchema;
}
extern "C" {
    pub fn WCDBSchemaTemp() -> CPPSchema;
}
extern "C" {
    pub fn WCDBTableConstraintCreate(name: *const ::std::os::raw::c_char) -> CPPTableConstraint;
}
extern "C" {
    pub fn WCDBTableConstraintConfigPrimaryKey(constraint: CPPTableConstraint);
}
extern "C" {
    pub fn WCDBTableConstraintConfigUnique(constraint: CPPTableConstraint);
}
extern "C" {
    pub fn WCDBTableConstraintConfigIndexedColumn(
        constraint: CPPTableConstraint,
        columns: *const CPPIndexedColumn,
        colNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBTableConstraintConfigIndexedColumn2(
        constraint: CPPTableConstraint,
        columns: CPPCommonArray,
    );
}
extern "C" {
    pub fn WCDBTableConstraintConfigConfliction(
        constraint: CPPTableConstraint,
        conflict: WCDBSyntaxConflictAction,
    );
}
extern "C" {
    pub fn WCDBTableConstraintConfigCheckCondition(
        constraint: CPPTableConstraint,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBTableConstraintConfigForeignKey(
        constraint: CPPTableConstraint,
        columns: *const CPPColumn,
        colNum: ::std::os::raw::c_int,
        foreignKey: CPPForeignKey,
    );
}
extern "C" {
    pub fn WCDBTableConstraintConfigForeignKey2(
        constraint: CPPTableConstraint,
        columns: CPPCommonArray,
        foreignKey: CPPForeignKey,
    );
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreate(value: CPPCommonValue) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithTable(
        tableName: *const ::std::os::raw::c_char,
    ) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithFunction(
        functionName: *const ::std::os::raw::c_char,
    ) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithJoin(join: CPPJoin) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithSelection(select: CPPStatementSelect)
        -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithTableOrSubqueries(
        queries: *const CPPTableOrSubquery,
        queryNum: ::std::os::raw::c_int,
    ) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryCreateWithTableOrSubqueries2(
        tableOrSubqueries: CPPCommonArray,
    ) -> CPPTableOrSubquery;
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigSchema2(
        tableOrSubquery: CPPTableOrSubquery,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigSchema(tableOrSubquery: CPPTableOrSubquery, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigAs(
        tableOrSubquery: CPPTableOrSubquery,
        aliasName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigNotIndexed(tableOrSubquery: CPPTableOrSubquery);
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigIndexName(
        tableOrSubquery: CPPTableOrSubquery,
        indexName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigArguments(
        tableOrSubquery: CPPTableOrSubquery,
        args: *const CPPExpression,
        argNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBTableOrSubqueryConfigArgument(
        tableOrSubquery: CPPTableOrSubquery,
        expression: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBUpsertCreate() -> CPPUpsert;
}
extern "C" {
    pub fn WCDBUpsertConfigIndexdColumn(
        upsert: CPPUpsert,
        columns: *const CPPIndexedColumn,
        colnum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBUpsertConfigIndexdColumn2(upsert: CPPUpsert, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBUpsertConfigWhere(upsert: CPPUpsert, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBUpsertConfigDoNothing(upsert: CPPUpsert);
}
extern "C" {
    pub fn WCDBUpsertConfigDoUpdate(upsert: CPPUpsert);
}
extern "C" {
    pub fn WCDBUpsertConfigSetColumns(
        upsert: CPPUpsert,
        columns: *const CPPColumn,
        colNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBUpsertConfigSetColumns2(upsert: CPPUpsert, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBUpsertConfigToValue(upsert: CPPUpsert, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBUpsertConfigToValue2(upsert: CPPUpsert, expression: CPPCommonValue);
}
extern "C" {
    pub fn WCDBWindowDefCreate() -> CPPWindowDef;
}
extern "C" {
    pub fn WCDBWindowDefConfigPartition(
        def: CPPWindowDef,
        partitions: *const CPPExpression,
        partitionNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBWindowDefConfigPartition2(def: CPPWindowDef, partitions: CPPMultiTypeArray);
}
extern "C" {
    pub fn WCDBWindowDefConfigOrder(
        def: CPPWindowDef,
        orderingTerms: *const CPPOrderingTerm,
        orderingTermNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBWindowDefConfigFrameSpec(def: CPPWindowDef, frameSpec: CPPFrameSpec);
}
extern "C" {
    pub fn WCDBStatementAlterTableCreate() -> CPPStatementAlterTable;
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigTable(
        alterTable: CPPStatementAlterTable,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigSchema(
        alterTable: CPPStatementAlterTable,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigSchema2(
        alterTable: CPPStatementAlterTable,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigRenameToTable(
        alterTable: CPPStatementAlterTable,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigRenameColumn(
        alterTable: CPPStatementAlterTable,
        column: CPPColumn,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigRenameColumn2(
        alterTable: CPPStatementAlterTable,
        column: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigRenameToColumn(
        alterTable: CPPStatementAlterTable,
        column: CPPColumn,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigRenameToColumn2(
        alterTable: CPPStatementAlterTable,
        column: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementAlterTableConfigAddColumn(
        alterTable: CPPStatementAlterTable,
        columndef: CPPColumnDef,
    );
}
extern "C" {
    pub fn WCDBStatementAnalyzeCreate() -> CPPStatementAnalyze;
}
extern "C" {
    pub fn WCDBStatementAnalyzeToAnalyze(analyze: CPPStatementAnalyze);
}
extern "C" {
    pub fn WCDBStatementAnalyzeConfigSchema(analyze: CPPStatementAnalyze, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementAnalyzeConfigSchema2(analyze: CPPStatementAnalyze, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementAnalyzeConfigTable(
        analyze: CPPStatementAnalyze,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementAnalyzeConfigIndex(
        analyze: CPPStatementAnalyze,
        index: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementAttachCreate() -> CPPStatementAttach;
}
extern "C" {
    pub fn WCDBStatementAttachConfigPath(attach: CPPStatementAttach, path: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementAttachConfigPath2(attach: CPPStatementAttach, path: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementAttachConfigSchema(attach: CPPStatementAttach, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementAttachConfigSchema2(attach: CPPStatementAttach, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementAttachConfigKey(attach: CPPStatementAttach, key: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementAttachConfigKey2(attach: CPPStatementAttach, key: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementBeginCreate() -> CPPStatementBegin;
}
extern "C" {
    pub fn WCDBStatementBeginConfigType(begin: CPPStatementBegin, type_: WCDBSyntaxTransactionType);
}
extern "C" {
    pub fn WCDBStatementCommitCreate() -> CPPStatementCommit;
}
extern "C" {
    pub fn WCDBStatementCreateIndexCreate() -> CPPStatementCreateIndex;
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigIndexName(
        createIndex: CPPStatementCreateIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigSchema(
        createIndex: CPPStatementCreateIndex,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigSchema2(
        createIndex: CPPStatementCreateIndex,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigUniqe(createIndex: CPPStatementCreateIndex);
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigIfNotExist(createIndex: CPPStatementCreateIndex);
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigTable(
        createIndex: CPPStatementCreateIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigIndexColumns(
        createIndex: CPPStatementCreateIndex,
        columns: *const CPPIndexedColumn,
        columnNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigIndexColumns2(
        createIndex: CPPStatementCreateIndex,
        columns: CPPCommonArray,
    );
}
extern "C" {
    pub fn WCDBStatementCreateIndexConfigWhere(
        createIndex: CPPStatementCreateIndex,
        condition: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableCreate() -> CPPStatementCreateTable;
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigTable(
        createTable: CPPStatementCreateTable,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigSchema2(
        createTable: CPPStatementCreateTable,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigSchema(
        createTable: CPPStatementCreateTable,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigTemp(createTable: CPPStatementCreateTable);
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigIfNotExist(createTable: CPPStatementCreateTable);
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigAs(
        createTable: CPPStatementCreateTable,
        select: CPPStatementSelect,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigColumns(
        createTable: CPPStatementCreateTable,
        columns: *const CPPColumnDef,
        columnNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigColumn(
        createTable: CPPStatementCreateTable,
        column: CPPColumnDef,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigTableConstraints(
        createTable: CPPStatementCreateTable,
        constraints: *const CPPTableConstraint,
        constraintNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTableConfigWithoutRowId(createTable: CPPStatementCreateTable);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerCreate() -> CPPStatementCreateTrigger;
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigTrigger(
        createTrigger: CPPStatementCreateTrigger,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigSchema(
        createTrigger: CPPStatementCreateTrigger,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigSchema2(
        createTrigger: CPPStatementCreateTrigger,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigTemp(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigIfNotExist(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigBefore(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigAfter(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigInsteadOf(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigDelete(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigInsert(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigUpdate(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigColumns(
        createTrigger: CPPStatementCreateTrigger,
        columns: *const CPPColumn,
        colNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigColumns2(
        createTrigger: CPPStatementCreateTrigger,
        columns: CPPCommonArray,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigTable(
        createTrigger: CPPStatementCreateTrigger,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigForEachRow(createTrigger: CPPStatementCreateTrigger);
}
extern "C" {
    pub fn WCDBStatementCreateTriggerConfigWhen(
        createTrigger: CPPStatementCreateTrigger,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerExecuteInsert(
        createTrigger: CPPStatementCreateTrigger,
        insert: CPPStatementInsert,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerExecuteUpdate(
        createTrigger: CPPStatementCreateTrigger,
        update: CPPStatementUpdate,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerExecuteDelete(
        createTrigger: CPPStatementCreateTrigger,
        delete_: CPPStatementDelete,
    );
}
extern "C" {
    pub fn WCDBStatementCreateTriggerExecuteSelect(
        createTrigger: CPPStatementCreateTrigger,
        select: CPPStatementSelect,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewCreate() -> CPPStatementCreateView;
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigView(
        createView: CPPStatementCreateView,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigSchema(
        createView: CPPStatementCreateView,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigSchema2(
        createView: CPPStatementCreateView,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigTemp(createView: CPPStatementCreateView);
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigIfNotExist(createView: CPPStatementCreateView);
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigAs(
        createView: CPPStatementCreateView,
        select: CPPStatementSelect,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigColumns(
        createView: CPPStatementCreateView,
        columns: *const CPPColumn,
        columnNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementCreateViewConfigColumns2(
        createView: CPPStatementCreateView,
        columns: CPPCommonArray,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableCreate() -> CPPStatementCreateVirtualTable;
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigTable(
        createTable: CPPStatementCreateVirtualTable,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigSchema(
        createTable: CPPStatementCreateVirtualTable,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigSchema2(
        createTable: CPPStatementCreateVirtualTable,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigIfNotExist(
        createTable: CPPStatementCreateVirtualTable,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigModule(
        createTable: CPPStatementCreateVirtualTable,
        module: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementCreateVirtualTableConfigArguments(
        createTable: CPPStatementCreateVirtualTable,
        arguments: *const *const ::std::os::raw::c_char,
        argNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteCreate() -> CPPStatementDelete;
}
extern "C" {
    pub fn WCDBStatementDeleteConfigWith(
        deleteStatement: CPPStatementDelete,
        expressions: *const CPPCommonTableExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigRecursive(deleteStatement: CPPStatementDelete);
}
extern "C" {
    pub fn WCDBStatementDeleteConfigDeleteFrom(
        deleteStatement: CPPStatementDelete,
        table: CPPQualifiedTable,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigDeleteFrom2(
        deleteStatement: CPPStatementDelete,
        table: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigWhere(
        deleteStatement: CPPStatementDelete,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigOrder(
        deleteStatement: CPPStatementDelete,
        orders: *const CPPOrderingTerm,
        orderNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigLimitRange(
        deleteStatement: CPPStatementDelete,
        from: CPPExpression,
        to: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigLimitCount(
        deleteStatement: CPPStatementDelete,
        limit: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigOffset(
        deleteStatement: CPPStatementDelete,
        offset: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigLimitRange2(
        deleteStatement: CPPStatementDelete,
        from: CPPCommonValue,
        to: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigLimitCount2(
        deleteStatement: CPPStatementDelete,
        limit: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDeleteConfigOffset2(
        deleteStatement: CPPStatementDelete,
        offset: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDetachCreate() -> CPPStatementDetach;
}
extern "C" {
    pub fn WCDBStatementDetachConfigSchema(detachStatement: CPPStatementDetach, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementDetachConfigSchema2(
        detachStatement: CPPStatementDetach,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDropIndexCreate() -> CPPStatementDropIndex;
}
extern "C" {
    pub fn WCDBStatementDropIndexConfigSchema(
        dropIndexStatement: CPPStatementDropIndex,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementDropIndexConfigSchema2(
        dropIndexStatement: CPPStatementDropIndex,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDropIndexConfigIndex(
        dropIndexStatement: CPPStatementDropIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementDropIndexConfigIfExists(dropIndexStatement: CPPStatementDropIndex);
}
extern "C" {
    pub fn WCDBStatementDropTableCreate() -> CPPStatementDropTable;
}
extern "C" {
    pub fn WCDBStatementDropTableConfigSchema(
        dropTableStatement: CPPStatementDropTable,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementDropTableConfigSchema2(
        dropTableStatement: CPPStatementDropTable,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDropTableConfigTable(
        dropTableStatement: CPPStatementDropTable,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementDropTableConfigIfExists(dropTableStatement: CPPStatementDropTable);
}
extern "C" {
    pub fn WCDBStatementDropTriggerCreate() -> CPPStatementDropTrigger;
}
extern "C" {
    pub fn WCDBStatementDropTriggerConfigSchema(
        dropTriggerStatement: CPPStatementDropTrigger,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementDropTriggerConfigSchema2(
        dropTriggerStatement: CPPStatementDropTrigger,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDropTriggerConfigTrigger(
        dropTriggerStatement: CPPStatementDropTrigger,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementDropTriggerConfigIfExists(dropTriggerStatement: CPPStatementDropTrigger);
}
extern "C" {
    pub fn WCDBStatementDropViewCreate() -> CPPStatementDropView;
}
extern "C" {
    pub fn WCDBStatementDropViewConfigSchema(
        dropViewStatement: CPPStatementDropView,
        schema: CPPSchema,
    );
}
extern "C" {
    pub fn WCDBStatementDropViewConfigSchema2(
        dropViewStatement: CPPStatementDropView,
        schema: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementDropViewConfigView(
        dropViewStatement: CPPStatementDropView,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementDropViewConfigIfExists(dropViewStatement: CPPStatementDropView);
}
extern "C" {
    pub fn WCDBStatementExplainCreate() -> CPPStatementExplain;
}
extern "C" {
    pub fn WCDBStatementExplain(
        explain: CPPStatementExplain,
        statement: *mut CPPObject,
        queryPlan: bool,
    );
}
extern "C" {
    pub fn WCDBStatementInsertCreate() -> CPPStatementInsert;
}
extern "C" {
    pub fn WCDBStatementInsertConfigWith(
        insert: CPPStatementInsert,
        exps: *const CPPCommonTableExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigRecursive(insert: CPPStatementInsert);
}
extern "C" {
    pub fn WCDBStatementInsertConfigTable(
        insert: CPPStatementInsert,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigSchema(insert: CPPStatementInsert, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementInsertConfigSchema2(insert: CPPStatementInsert, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementInsertConfigConfiction(
        insert: CPPStatementInsert,
        action: WCDBSyntaxConflictAction,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigAlias(
        insert: CPPStatementInsert,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigColumns(
        insert: CPPStatementInsert,
        columns: *const CPPColumn,
        colNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigColumns2(insert: CPPStatementInsert, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBStatementInsertConfigValues(
        insert: CPPStatementInsert,
        exps: *const CPPExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigValuesWithMultiTypeArray(
        insert: CPPStatementInsert,
        values: CPPMultiTypeArray,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigValuesWithBindParameters(
        insert: CPPStatementInsert,
        parametersCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementInsertConfigSelect(insert: CPPStatementInsert, select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementInsertConfigDefaultValues(insert: CPPStatementInsert);
}
extern "C" {
    pub fn WCDBStatementInsertConfigUpsert(insert: CPPStatementInsert, upsert: CPPUpsert);
}
extern "C" {
    pub fn WCDBStatementPragmaCreate() -> CPPStatementPragma;
}
extern "C" {
    pub fn WCDBStatementPragmaConfigPragma(statment: CPPStatementPragma, pragma: CPPPragma);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigSchema(statment: CPPStatementPragma, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigSchema2(statment: CPPStatementPragma, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigToValue(statment: CPPStatementPragma, value: CPPLiteralValue);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigWithValue(statment: CPPStatementPragma, value: CPPLiteralValue);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigToValue2(statment: CPPStatementPragma, value: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementPragmaConfigWithValue2(statment: CPPStatementPragma, value: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementReIndexCreate() -> CPPStatementReIndex;
}
extern "C" {
    pub fn WCDBStatementReIndexConfigCollation(
        statment: CPPStatementReIndex,
        collation: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementReIndexConfigTable(
        statment: CPPStatementReIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementReIndexConfigIndex(
        statment: CPPStatementReIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementReIndexConfigSchema(statment: CPPStatementReIndex, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementReIndexConfigSchema2(statment: CPPStatementReIndex, schema: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementReleaseCreate() -> CPPStatementRelease;
}
extern "C" {
    pub fn WCDBStatementReleaseConfigSavepoint(
        release: CPPStatementRelease,
        savepoint: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementRollbackCreate() -> CPPStatementRollback;
}
extern "C" {
    pub fn WCDBStatementRollbackConfigSavepoint(
        rollback: CPPStatementRollback,
        savepoint: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementSavepointCreate() -> CPPStatementSavepoint;
}
extern "C" {
    pub fn WCDBStatementSavepointConfigName(
        savepoint: CPPStatementSavepoint,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementSelectCreate() -> CPPStatementSelect;
}
extern "C" {
    pub fn WCDBStatementSelectConfigWith(
        select: CPPStatementSelect,
        exps: *const CPPCommonTableExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigRecursive(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigResultColumns(
        select: CPPStatementSelect,
        resultColumn: *const CPPResultColumn,
        columnNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigResultColumns2(
        select: CPPStatementSelect,
        resultColumns: CPPMultiTypeArray,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigDistinct(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigFromTableOrSubqueries(
        select: CPPStatementSelect,
        tableOrSubqueries: *const CPPTableOrSubquery,
        queryNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigFromTableOrSubqueries2(
        select: CPPStatementSelect,
        tableOrSubqueries: CPPMultiTypeArray,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigWhere(select: CPPStatementSelect, condition: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementSelectConfigGroups(
        select: CPPStatementSelect,
        exps: *const CPPExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigGroups2(select: CPPStatementSelect, groups: CPPMultiTypeArray);
}
extern "C" {
    pub fn WCDBStatementSelectConfigHaving(select: CPPStatementSelect, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementSelectConfigWindow(
        select: CPPStatementSelect,
        windowName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigAs(select: CPPStatementSelect, windowDef: CPPWindowDef);
}
extern "C" {
    pub fn WCDBStatementSelectConfigValues(
        select: CPPStatementSelect,
        exps: *const CPPExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigUnion(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigUnionAll(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigIntersect(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigExcept(select: CPPStatementSelect);
}
extern "C" {
    pub fn WCDBStatementSelectConfigOrders(
        select: CPPStatementSelect,
        orders: *const CPPOrderingTerm,
        orderNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigLimitRange(
        select: CPPStatementSelect,
        from: CPPExpression,
        to: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigLimitCount(select: CPPStatementSelect, limit: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementSelectConfigLimitOffset(select: CPPStatementSelect, offset: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementSelectConfigLimitRange2(
        select: CPPStatementSelect,
        from: CPPCommonValue,
        to: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementSelectConfigLimitCount2(select: CPPStatementSelect, limit: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementSelectConfigOffset2(select: CPPStatementSelect, offset: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementUpdateCreate() -> CPPStatementUpdate;
}
extern "C" {
    pub fn WCDBStatementUpdateConfigWith(
        update: CPPStatementUpdate,
        exps: *const CPPCommonTableExpression,
        expNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigRecursive(update: CPPStatementUpdate);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigTable(update: CPPStatementUpdate, table: CPPQualifiedTable);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigTable2(update: CPPStatementUpdate, table: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigConfiction(
        update: CPPStatementUpdate,
        action: WCDBSyntaxConflictAction,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigColumns(
        update: CPPStatementUpdate,
        columns: *const CPPColumn,
        colNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigColumns2(update: CPPStatementUpdate, columns: CPPCommonArray);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigValue(update: CPPStatementUpdate, expression: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigValue2(update: CPPStatementUpdate, expression: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigColumnsToValues(
        update: CPPStatementUpdate,
        columns: CPPCommonArray,
        values: CPPMultiTypeArray,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigColumnsToBindParameters(
        update: CPPStatementUpdate,
        columns: CPPCommonArray,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigCondition(
        update: CPPStatementUpdate,
        expression: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigOrders(
        update: CPPStatementUpdate,
        orders: *const CPPOrderingTerm,
        orderNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigLimitRange(
        update: CPPStatementUpdate,
        from: CPPExpression,
        to: CPPExpression,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigLimitCount(update: CPPStatementUpdate, limit: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigLimitOffset(update: CPPStatementUpdate, offset: CPPExpression);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigLimitRange2(
        update: CPPStatementUpdate,
        from: CPPCommonValue,
        to: CPPCommonValue,
    );
}
extern "C" {
    pub fn WCDBStatementUpdateConfigLimitCount2(update: CPPStatementUpdate, limit: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementUpdateConfigOffset2(update: CPPStatementUpdate, offset: CPPCommonValue);
}
extern "C" {
    pub fn WCDBStatementVacuumCreate() -> CPPStatementVacuum;
}
extern "C" {
    pub fn WCDBStatementVacuumConfigAll(vacuum: CPPStatementVacuum);
}
extern "C" {
    pub fn WCDBStatementVacuumConfigSchema(vacuum: CPPStatementVacuum, schema: CPPSchema);
}
extern "C" {
    pub fn WCDBStatementVacuumConfigSchema2(vacuum: CPPStatementVacuum, schema: CPPCommonValue);
}
